(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[423],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2852:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),o=["components"],s={sidebar_position:2},c="Transaction Structure",l={unversionedId:"documentation/everpay-tx",id:"documentation/everpay-tx",isDocsHomePage:!1,title:"Transaction Structure",description:"everPay has its own separate transaction format and all everPay transactions will be stored on the arweave blockchain for everyone to verify.",source:"@site/docs/documentation/everpay-tx.md",sourceDirName:"documentation",slug:"/documentation/everpay-tx",permalink:"/docs/documentation/everpay-tx",editUrl:"https://github.com/everFinance/docs/edit/master/docs/documentation/everpay-tx.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentation",previous:{title:"Account Model",permalink:"/docs/documentation/account-model"},next:{title:"Transaction History",permalink:"/docs/documentation/everpay-transaction"}},d=[{value:"Transaction signature content",id:"transaction-signature-content",children:[]},{value:"Transaction Signature Detail Field Description",id:"transaction-signature-detail-field-description",children:[]},{value:"Signature generation for different account models",id:"signature-generation-for-different-account-models",children:[{value:"Ethereum account model",id:"ethereum-account-model",children:[]},{value:"Arweave account model",id:"arweave-account-model",children:[]}]},{value:"Unique transaction identifier: everHash",id:"unique-transaction-identifier-everhash",children:[]}],u={toc:d};function p(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"transaction-structure"},"Transaction Structure"),(0,i.kt)("p",null,"everPay has its own separate transaction format and all everPay transactions will be stored on the arweave blockchain for everyone to verify."),(0,i.kt)("p",null,"Each transaction in everPay is uniquely identified by a single identifier: everHash."),(0,i.kt)("p",null,"Currently everPay has three types of transactions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deposit: after the blockchain transaction record of user recharge confirms the corresponding block, bot generates a ",(0,i.kt)("inlineCode",{parentName:"li"},"'mint'")," transaction to be stored on arweave"),(0,i.kt)("li",{parentName:"ul"},"Transfer: A user-signed transfer transaction that transfers the Token balance to the recipient's account"),(0,i.kt)("li",{parentName:"ul"},"Withdraw: User-signed withdrawal transaction, the transaction will be verified by everPay's DAO members, and the withdrawal proposal will be submitted through DAO and executed in Ether or Arweave")),(0,i.kt)("h2",{id:"transaction-signature-content"},"Transaction signature content"),(0,i.kt)("p",null,"Signed transactions use the same signature specification, regardless of whether they are signed by PersonalSign in Ether or RSS in Arweave."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export const getEverpayTxMessage = (everpayTxWithoutSig: EverpayTxWithoutSig): string => {\n  const keys = [\n    'tokenSymbol',\n    'action',\n    'from',\n    'to',\n    'amount',\n    'fee',\n    'feeRecipient',\n    'nonce',\n    'tokenID',\n    'chainType',\n    'chainID',\n    'data',\n    'version'\n  ] as const\n  return keys.map(key => `${key}:${everpayTxWithoutSig[key]}`).join('\\n')\n}\n")),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"EverpayTxWithoutSig")," can be found in ",(0,i.kt)("a",{parentName:"p",href:"./everpay-js/types#everpaytxwithoutsig"},"everpay-js types#EverpayTxWithoutSig")),(0,i.kt)("h2",{id:"transaction-signature-detail-field-description"},"Transaction Signature Detail Field Description"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Field"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"tokenSymbol"),(0,i.kt)("td",{parentName:"tr",align:null},"token name")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"action"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'mint'")," for deposit; ",(0,i.kt)("inlineCode",{parentName:"td"},"'transfer'")," for transfer; ",(0,i.kt)("inlineCode",{parentName:"td"},"'burn'")," for withdraw")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"from"),(0,i.kt)("td",{parentName:"tr",align:null},"the current everPay account ID that signed the transaction")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"to"),(0,i.kt)("td",{parentName:"tr",align:null},"for transfers, ",(0,i.kt)("inlineCode",{parentName:"td"},"to")," is the other everPay account ID; for withdrawals, ",(0,i.kt)("inlineCode",{parentName:"td"},"to")," is the blockchain wallet address to withdraw to")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"amount"),(0,i.kt)("td",{parentName:"tr",align:null},"the amount to be transferred or withdrawn, type uint; ",(0,i.kt)("inlineCode",{parentName:"td"},"decimals")," processing is required to set this, e.g. 0.1USDT, here it is 100000 after USDT's ",(0,i.kt)("inlineCode",{parentName:"td"},"decimals: 6")," processing")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"fee"),(0,i.kt)("td",{parentName:"tr",align:null},"Handling fee, type uint. decimals are required, e.g. 0.1USDT, after USDT's ",(0,i.kt)("inlineCode",{parentName:"td"},"decimals: 6")," processing, it will be 100000")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"feeRecipient"),(0,i.kt)("td",{parentName:"tr",align:null},"fee payment address, via the ",(0,i.kt)("a",{parentName:"td",href:"./server-api/basic-api/info"},"everpay server info API")," interface to get")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"nonce"),(0,i.kt)("td",{parentName:"tr",align:null},"unix milliseconds")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"tokenID"),(0,i.kt)("td",{parentName:"tr",align:null},"via ",(0,i.kt)("a",{parentName:"td",href:"./server-api/basic-api/info"},"everpay server info API")," interface, must match the token id corresponding to ",(0,i.kt)("inlineCode",{parentName:"td"},"tokenSymbol"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"data"),(0,i.kt)("td",{parentName:"tr",align:null},"transfer additional information, user-defined JSON data, processed by ",(0,i.kt)("inlineCode",{parentName:"td"},"JSON.stringify()")," and passed. ",(0,i.kt)("strong",{parentName:"td"},"When the current account is the arweave account model, ",(0,i.kt)("inlineCode",{parentName:"strong"},'{"arOwner": "current arweave address\'s owner(public key)"}'))," is passed for RSA-PSS sha256 verify")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"version"),(0,i.kt)("td",{parentName:"tr",align:null},"transaction version ",(0,i.kt)("inlineCode",{parentName:"td"},"'v1'"))))),(0,i.kt)("h2",{id:"signature-generation-for-different-account-models"},"Signature generation for different account models"),(0,i.kt)("h3",{id:"ethereum-account-model"},"Ethereum account model"),(0,i.kt)("p",null,"Signing via ethereum ",(0,i.kt)("inlineCode",{parentName:"p"},"personalSign")),(0,i.kt)("h4",{id:"generate-signature-with-everpay-tx-via-ethersjs"},"Generate signature with everPay Tx via ethers.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const everpayTxWithoutSig = {\n  tokenSymbol: 'usdt',\n  action: 'transfer',\n  from: '0x26361130d5d6E798E9319114643AF8c868412859',\n  to: '5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo',\n  amount: '5260000',\n  fee: '0',\n  feeRecipient: '0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1',\n  nonce: '1626079771946',\n  tokenID: '0xd85476c906b5301e8e9eb58d174a6f96b9dfc5ee',\n  chainType: 'ethereum',\n  chainID: '42',\n  data: '{\"hello\":\"world\",\"this\":\"is everpay\"}',\n  version: 'v1'\n}\n\n// const message = getEverpayTxMessage(everpayTxWithoutSig)\nconst message = `tokenSymbol:usdt\naction:transfer\nfrom:0x26361130d5d6E798E9319114643AF8c868412859\nto:5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo\namount:5260000\nfee:0\nfeeRecipient:0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1\nnonce:1626079771946\ntokenID:0xd85476c906b5301e8e9eb58d174a6f96b9dfc5ee\nchainType:ethereum\nchainID:42\ndata:{\"hello\":\"world\",\"this\":\"is everpay\"}\nversion:v1`\n\n// personalSign\nconst signMessageAsync = async (ethConnectedSigner: Signer, message: string): Promise<string> => {\n  return await ethConnectedSigner.signMessage(message)\n}\n\nconst sig = await signMessageAsync(ethConnectedSigner, message)\nconst everPayTx = {\n  ...everpayTxWithoutSig,\n  sig\n}\n")),(0,i.kt)("p",null,"Pseudocode reference source: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/everFinance/everpay-js/blob/main/src/lib/sign.ts"},"everpay-js src/lib/sign.ts")),(0,i.kt)("h3",{id:"arweave-account-model"},"Arweave account model"),(0,i.kt)("p",null,"Signing via arweave RSA-PSS sha256"),(0,i.kt)("h4",{id:"generate-signature-with-everpay-tx-via-arweavejs"},"Generate signature with everPay Tx via arweave.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const everpayTxWithoutSig = {\n  tokenSymbol: 'ar',\n  action: 'transfer',\n  from: '5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo',\n  to: '0x26361130d5d6E798E9319114643AF8c868412859',\n  amount: '100',\n  fee: '0',\n  feeRecipient: '0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1',\n  nonce: '1626080392301',\n  tokenID: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,0xcc9141efa8c20c7df0778748255b1487957811be',\n  chainType: 'arweave,ethereum',\n  chainID: '0,42',\n  data: '{\"hello\":\"world\",\"this\":\"is everpay\",\"arOwner\":\"odtNk97a4PARR0I8g3kQpzlFVmPg-udyjfl81fbTioyP2pEw5tP5A1-FVqR-QFFPskW-j7yAze5usYNWHEir7oVQ9d9bbkcZIDEPqwSTO1JoD1BKXeeBK0xsmiSgxeY7uuRXWdhXREhlmIMsV8ObakEeXdbbxbs89XaZHBuES7boASrRVDXRz_mhMu6u_58OdLeMwR3I1BCH6nphNGVOehA7GOOqEBvtesBset0bNaLCb0JpSg5ZW_0AGLP-XydzE3IPLLx4NQEEJY21y8fChxYM4jntI78l5hojp9NlmS69EXlj0PoMjsbaWaz9WtnZaMAbnaOGAHhv8Y_TNmBI0FHpqHaGPP906Mnrgdm3tl2L40EX-Q6-liNVkB56CmPxXzSesu-4x5LLYxQ-aX3W6Hj7RCDTacxqUJHzOrhJqXSx6Jx0t8CwyfReMgVv4p5t1C3OZ8yYbJ_H3LdkeriVniaC5jQdMyIJ6QBMzr1XdXIw9WuEG2kCIYtvOp2qDuu9o2SY-9W4Yv7VWRDfWO38xxR4ZO65MMAdZxeaZ4w8sK_owH46Wm0XoT3Al-LPypaeijWqlHEu4R8c2ersD3xkDvXC_lNtaQw_qyfI3UEH5fWupY4zhZeDGkvXQh32Fv4CxlZL58iUHv9SvR7p5LgBCC3AVUbn7Sqc4xPUCZMj-Tc\"}',\n  version: 'v1'\n}\n\n// const message = getEverpayTxMessage(everpayTxWithoutSig)\nconst message = `tokenSymbol:ar\naction:transfer\nfrom:5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo\nto:0x26361130d5d6E798E9319114643AF8c868412859\namount:100\nfee:0\nfeeRecipient:0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1\nnonce:1626080392301\ntokenID:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,0xcc9141efa8c20c7df0778748255b1487957811be\nchainType:arweave,ethereum\nchainID:0,42\ndata:{\"hello\":\"world\",\"this\":\"is everpay\",\"arOwner\":\"odtNk97a4PARR0I8g3kQpzlFVmPg-udyjfl81fbTioyP2pEw5tP5A1-FVqR-QFFPskW-j7yAze5usYNWHEir7oVQ9d9bbkcZIDEPqwSTO1JoD1BKXeeBK0xsmiSgxeY7uuRXWdhXREhlmIMsV8ObakEeXdbbxbs89XaZHBuES7boASrRVDXRz_mhMu6u_58OdLeMwR3I1BCH6nphNGVOehA7GOOqEBvtesBset0bNaLCb0JpSg5ZW_0AGLP-XydzE3IPLLx4NQEEJY21y8fChxYM4jntI78l5hojp9NlmS69EXlj0PoMjsbaWaz9WtnZaMAbnaOGAHhv8Y_TNmBI0FHpqHaGPP906Mnrgdm3tl2L40EX-Q6-liNVkB56CmPxXzSesu-4x5LLYxQ-aX3W6Hj7RCDTacxqUJHzOrhJqXSx6Jx0t8CwyfReMgVv4p5t1C3OZ8yYbJ_H3LdkeriVniaC5jQdMyIJ6QBMzr1XdXIw9WuEG2kCIYtvOp2qDuu9o2SY-9W4Yv7VWRDfWO38xxR4ZO65MMAdZxeaZ4w8sK_owH46Wm0XoT3Al-LPypaeijWqlHEu4R8c2ersD3xkDvXC_lNtaQw_qyfI3UEH5fWupY4zhZeDGkvXQh32Fv4CxlZL58iUHv9SvR7p5LgBCC3AVUbn7Sqc4xPUCZMj-Tc\"}\nversion:v1`\n\n// RSA-PSS sha256\nconst signMessageAsync = async (arJWK: ArJWK, personalMsgHash: Buffer): Promise<string> => {\n  const arweave = Arweave.init(options)\n  // web\n  if (arJWK === 'use_wallet') {\n    try {\n      await checkArPermissions('SIGNATURE')\n    } catch {\n      throw new Error(ERRORS.SIGNATURE_PERMISSION_NEEDED)\n    }\n\n    const algorithm = {\n      name: 'RSA-PSS',\n      saltLength: 32\n    }\n\n    try {\n      // TODO: wait arweave-js update arconnect.d.ts\n      const signature = await (window.arweaveWallet as any).signature(\n        personalMsgHash,\n        algorithm\n      )\n      const buf = new Uint8Array(Object.values(signature))\n      return Arweave.utils.bufferTob64Url(buf)\n    } catch {\n      throw new Error(ERRORS.SIGNATURE_FAILED)\n    }\n\n  // node\n  } else {\n    const buf = await arweave.crypto.sign(arJWK, personalMsgHash)\n    return Arweave.utils.bufferTob64Url(buf)\n  }\n}\n\n// cp from: https://github.com/ethereumjs/ethereumjs-util/blob/ebf40a0fba8b00ba9acae58405bca4415e383a0d/src/signature.ts#L168\nconst hashPersonalMessage = function (message: Buffer): Buffer {\n  const prefix = Buffer.from(\n    `\\u0019Ethereum Signed Message:\\n${message.length.toString()}`,\n    'utf-8'\n  )\n  return keccak256(Buffer.concat([prefix, message]))\n}\n\nconst personalMsgHash = hashPersonalMessage(Buffer.from(message))\n\nconst sig = await signMessageAsync(config.arJWK as ArJWK, personalMsgHash)\nconst everPayTx = {\n  ...everpayTxWithoutSig,\n  sig\n}\n")),(0,i.kt)("p",null,"Pseudocode reference source: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/everFinance/everpay-js/blob/main/src/lib/sign.ts"},"everpay-js src/lib/sign.ts")),(0,i.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"arweave messages signed with RSA-PSS sha256 need to be processed by Ethereum ",(0,i.kt)("inlineCode",{parentName:"p"},"hashPersonalMessage")," to unify the authentication specification of everPay backend service."))),(0,i.kt)("h2",{id:"unique-transaction-identifier-everhash"},"Unique transaction identifier: everHash"),(0,i.kt)("p",null,"The everHash of every everPay Tx transaction is unique, ",(0,i.kt)("inlineCode",{parentName:"p"},"everHash")," is generated as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// cp from: https://github.com/ethereumjs/ethereumjs-util/blob/ebf40a0fba8b00ba9acae58405bca4415e383a0d/src/signature.ts#L168\nconst hashPersonalMessage = function (message: Buffer): Buffer {\n  const prefix = Buffer.from(\n    `\\u0019Ethereum Signed Message:\\n${message.length.toString()}`,\n    \'utf-8\'\n  )\n  return keccak256(Buffer.concat([prefix, message]))\n}\n\nconst message = `tokenSymbol:ar\naction:transfer\nfrom:5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo\nto:0x26361130d5d6E798E9319114643AF8c868412859\namount:100\nfee:0\nfeeRecipient:0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1\nnonce:1626080392301\ntokenID:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,0xcc9141efa8c20c7df0778748255b1487957811be\nchainType:arweave,ethereum\nchainID:0,42\ndata:{"hello":"world","this":"is everpay","arOwner":"odtNk97a4PARR0I8g3kQpzlFVmPg-udyjfl81fbTioyP2pEw5tP5A1-FVqR-QFFPskW-j7yAze5usYNWHEir7oVQ9d9bbkcZIDEPqwSTO1JoD1BKXeeBK0xsmiSgxeY7uuRXWdhXREhlmIMsV8ObakEeXdbbxbs89XaZHBuES7boASrRVDXRz_mhMu6u_58OdLeMwR3I1BCH6nphNGVOehA7GOOqEBvtesBset0bNaLCb0JpSg5ZW_0AGLP-XydzE3IPLLx4NQEEJY21y8fChxYM4jntI78l5hojp9NlmS69EXlj0PoMjsbaWaz9WtnZaMAbnaOGAHhv8Y_TNmBI0FHpqHaGPP906Mnrgdm3tl2L40EX-Q6-liNVkB56CmPxXzSesu-4x5LLYxQ-aX3W6Hj7RCDTacxqUJHzOrhJqXSx6Jx0t8CwyfReMgVv4p5t1C3OZ8yYbJ_H3LdkeriVniaC5jQdMyIJ6QBMzr1XdXIw9WuEG2kCIYtvOp2qDuu9o2SY-9W4Yv7VWRDfWO38xxR4ZO65MMAdZxeaZ4w8sK_owH46Wm0XoT3Al-LPypaeijWqlHEu4R8c2ersD3xkDvXC_lNtaQw_qyfI3UEH5fWupY4zhZeDGkvXQh32Fv4CxlZL58iUHv9SvR7p5LgBCC3AVUbn7Sqc4xPUCZMj-Tc"}\nversion:v1`\nconst personalMsgHash = hashPersonalMessage(Buffer.from(message))\nconst everHash = `0x${personalMsgHash.toString(\'hex\')}`\n')))}p.isMDXComponent=!0}}]);